{"version":3,"sources":["components/Form.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Form","inputText","setInputText","setTodos","setStatus","action","placeholder","value","onChange","e","target","type","className","onClick","preventDefault","prev","text","completed","id","Math","random","Todo","todoText","todo","todos","map","t","filter","element","TodoList","filteredTodos","filteredTodo","STATUS","App","useState","localStorage","getItem","status","setFilteredTodos","Array","keys","statusUpdater","currentTarget","innerText","setItem","saveCurrentFilterToLocal","useEffect","JSON","parse","stringify","href","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d3e4730.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {TodoObject} from '../App'\r\n\r\ninterface Props {\r\n    inputText: string\r\n    setInputText: React.Dispatch<React.SetStateAction<string>>\r\n    setTodos: React.Dispatch<React.SetStateAction<TodoObject[]>>\r\n    setStatus: React.Dispatch<React.SetStateAction<string>>\r\n}\r\nconst Form: React.FC<Props> = ({inputText, setInputText, setTodos, setStatus}) => {\r\n    function inputValueSetter(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        setInputText(e.target.value)\r\n    }\r\n\r\n    function submitTodo(e: React.MouseEvent<HTMLButtonElement>): void {\r\n        e.preventDefault()\r\n\r\n        setTodos((prev: TodoObject[]) => [\r\n            ...prev, {text: inputText, completed: false, id: Math.random()}\r\n        ])\r\n        setInputText('')\r\n    }\r\n\r\n    return <form action=\"\">\r\n            <input placeholder=\"type todo here\"\r\n                value={inputText} \r\n                onChange={inputValueSetter} \r\n                type=\"text\" \r\n                className=\"todo-input\" \r\n            />\r\n            <button onClick={submitTodo} className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n    </form>\r\n}\r\nexport default Form\r\n","import React from \"react\"\r\nimport {TodoObject} from '../App'\r\n\r\n\r\ninterface Props {\r\n    todos: TodoObject[]\r\n    setTodos: React.Dispatch<React.SetStateAction<TodoObject[]>>\r\n    filteredTodos: TodoObject[]\r\n}\r\nconst TodoList: React.FC<Props> = ({todos, setTodos, filteredTodos}) => {\r\n    return <ul className=\"todo-list\">\r\n        {filteredTodos.map((filteredTodo: TodoObject) => (\r\n            <Todo \r\n                key={filteredTodo.id} \r\n                todoText={filteredTodo.text} \r\n                todo={filteredTodo}\r\n                todos={todos} \r\n                setTodos={setTodos} \r\n            />\r\n        ))}\r\n    </ul>\r\n}\r\n\r\ninterface TodoProps {\r\n    todoText: string\r\n    todo: TodoObject\r\n    todos: TodoObject[]\r\n    setTodos: React.Dispatch<React.SetStateAction<TodoObject[]>>\r\n}\r\nconst Todo: React.FC<TodoProps> = ({todoText, todo, todos, setTodos}) => {\r\n    function deleteTodo(): void {\r\n        setTodos(todos.filter((element: TodoObject): boolean => element.id !== todo.id))\r\n    }\r\n\r\n    function completeTodo(): void {\r\n        setTodos(todos.map((t: TodoObject): TodoObject => {\r\n            if (t.id === todo.id) {\r\n                return {...t, completed: !t.completed}\r\n            }\r\n\r\n            return t\r\n        }))\r\n    }\r\n\r\n    return <div className=\"todo\">\r\n        <li className={`todo-item ${todo.completed ? 'completed' : ''}`}>{todoText}</li>\r\n        <button onClick={completeTodo} className=\"complete-btn\">\r\n            <i className=\"fas fa-check\"></i>\r\n        </button>\r\n        <button onClick={deleteTodo} className=\"trash-btn\">\r\n            <i className=\"fas fa-trash\"></i>\r\n        </button>\r\n    </div>\r\n}\r\n\r\nexport default TodoList","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\nimport {BrowserRouter as Router, Link} from 'react-router-dom'\n\ninterface Status {\n\tcomplete: string\n\tuncomplete: string\n}\nconst STATUS: Status = {\n\tcomplete: 'Completed | ',\n\tuncomplete: 'Uncompleted'\n}\n\nexport interface TodoObject {\n\ttext: string,\n\tcompleted: boolean,\n\tid: number\n}\nconst App: React.FC = () => {\n\tconst [inputText, setInputText] = useState<string>('')\n\tconst [todos, setTodos] = useState<TodoObject[]>([])\n\tconst [status, setStatus] = useState<string>(\n\t\tlocalStorage.getItem('last-status') || 'everything, this text doesnt matter'\n\t)\n\tconst [filteredTodos, setFilteredTodos] = useState<TodoObject[]>([])\n\t{\n\t\t\tlet x = [...Array(100).keys()]\n\t}\n\t\n\t// grab todos from last website visit\n\tuseEffect(getLocalTodos, [])\n\t// save the todo to localstorage\n\tuseEffect(saveTodosLocal, [todos])\n\t// change current filter\n\tuseEffect(filterTodos, [todos, status])\n\n\t\n\tfunction filterTodos(): void {\n\t\tswitch (status) {\n\t\t\tcase STATUS.complete:\n\t\t\t\tsetFilteredTodos(todos.filter((todo: TodoObject): boolean => todo.completed))\n\t\t\t\tbreak\n\t\t\tcase STATUS.uncomplete:\n\t\t\t\tsetFilteredTodos(todos.filter((todo: TodoObject): boolean => !todo.completed))\n\t\t\t\tbreak\n\t\t\t// default: short for case 'all'\n\t\t\tdefault: \n\t\t\t\tsetFilteredTodos(todos)\n\t\t}\n\n\n\n\t}\n\tfunction getLocalTodos() {\n\t\tif (!localStorage.getItem('todos')) {\n\t\t\tlocalStorage.setItem('todos', JSON.stringify([]))\n\t\t} else {\n\t\t\t// || [] for empty item, parse(a): a cant be bull\n\t\t\tsetTodos(JSON.parse(localStorage.getItem('todos') || '[]'))\n\t\t}\n\t}\n\tfunction saveTodosLocal(): void {\n\t\t/* saves person's todos to locatstoarge'\n\t\tno need to check if the localstorage is empty first because it will be done by a\n\t\tpreceeding function\n\t\t*/\n\n\t\tlocalStorage.setItem('todos', JSON.stringify(todos))\n\t}\n\n\tfunction saveCurrentFilterToLocal(status: string): void {\n        localStorage.setItem('last-status', status)\n    }\n\n\tfunction statusUpdater(e: React.MouseEvent<HTMLAnchorElement>): void {\n        const status = e.currentTarget.innerText\n        setStatus(status)\n        saveCurrentFilterToLocal(status)\n    }\n\n\treturn <Router>\n\t\t<header>\n\t\t\t<h1><a onClick={\n\t\t\t\t(): void => localStorage.setItem('last-status', 'everything')\n\t\t\t} href=\"/\" className='singlea'>Very good title</a></h1>\n\t\t\t<br/>\n\t\t\t<p>\n\t\t\t\tsimple some retexta sdasdasd Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sit error minus quia repellat, enim dignissimos, sint explicabo sequi doloribus labore ratione, nesciunt ipsa sapiente tenetur aliquid earum ex reiciendis ipsam?\n\t\t\t\t<br/>controls intuitive gl\n\t\t\t</p>\n\t\t\t<br/><hr/><br/>\n\t\t</header>\n\n\t\t<Form \n\t\t\tinputText={inputText} \n\t\t\tsetInputText={setInputText} \n\t\t\tsetTodos={setTodos}\n\t\t\tsetStatus={setStatus}\n\t\t\t/>\n\n\t\t<nav className=\"todo-filter-nav\">\n\t\t\t<Link to='/' onClick={statusUpdater}>All | </Link>\n\t\t\t<Link to='/completed' onClick={statusUpdater}>Completed | </Link>\n\t\t\t<Link to='/uncompleted' onClick={statusUpdater}>Uncompleted</Link>\n\t\t</nav>\n\t\t<TodoList todos={todos} setTodos={setTodos} filteredTodos={filteredTodos} />\n\n\t</Router>\n\n}\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}